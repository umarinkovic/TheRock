name: Test component

on:
  workflow_call:
    inputs:
      artifact_run_id:
        type: string
        default: ""
      artifact_group:
        type: string
      amdgpu_families:
        type: string
      test_runs_on:
        type: string
      platform:
        type: string
      component:
        type: string

permissions:
  contents: read

jobs:
  test_component:
    name: 'Test ${{ fromJSON(inputs.component).job_name }} (shard ${{ matrix.shard }} of ${{ fromJSON(inputs.component).total_shards }})'
    runs-on: ${{ inputs.test_runs_on }}
    timeout-minutes: 60
    container:
      image: ${{ inputs.platform == 'linux' && 'ghcr.io/rocm/no_rocm_image_ubuntu24_04@sha256:4150afe4759d14822f0e3f8930e1124f26e11f68b5c7b91ec9a02b20b1ebbb98' || null }}
      options: --ipc host
        --group-add video
        --device /dev/kfd
        --device /dev/dri
        --group-add 110
        --env-file /etc/podinfo/gha-gpu-isolation-settings
        --user 0:0 # Running as root, by recommendation of GitHub: https://docs.github.com/en/actions/reference/workflows-and-actions/dockerfile-support#user
    strategy:
      fail-fast: false
      matrix:
        # The shard array is based on "total_shards" from "fetch_test_configurations.py"
        # The test executable will shard based on the array. (ex: [1, 2, 3, 4] = four test shards)
        shard: ${{ fromJSON(inputs.component).shard_arr }}
    defaults:
      run:
        shell: bash
    env:
      VENV_DIR: ${{ github.workspace }}/.venv
      ARTIFACT_RUN_ID: "${{ inputs.artifact_run_id != '' && inputs.artifact_run_id || github.run_id }}"
      OUTPUT_ARTIFACTS_DIR: "./build"
      THEROCK_BIN_DIR: "./build/bin"
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
    steps:
      - name: "Fetch 'build_tools' from repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          sparse-checkout: build_tools
          path: "prejob"

      - name: Pre-job cleanup processes on Windows
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: . '${{ github.workspace }}\prejob\build_tools\github_actions\cleanup_processes.ps1'

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: "ROCm/TheRock"

      - name: Run setup test environment workflow
        uses: './.github/actions/setup_test_environment'
        with:
          ARTIFACT_RUN_ID: ${{ env.ARTIFACT_RUN_ID }}
          ARTIFACT_GROUP: ${{ inputs.artifact_group }}
          OUTPUT_ARTIFACTS_DIR: ${{ env.OUTPUT_ARTIFACTS_DIR }}
          VENV_DIR: ${{ env.VENV_DIR }}
          FETCH_ARTIFACT_ARGS: ${{ fromJSON(inputs.component).fetch_artifact_args }}
          IS_PR_FROM_FORK: ${{ github.event.pull_request.head.repo.fork }}
          REQUIREMENTS: ${{ fromJSON(inputs.component).requirements }}

      - name: Test
        timeout-minutes: ${{ fromJSON(inputs.component).timeout_minutes }}
        env:
          SHARD_INDEX: ${{ matrix.shard }}
          TOTAL_SHARDS: ${{ fromJSON(inputs.component).total_shards }}
          TEST_TYPE: ${{ fromJSON(inputs.component).test_type }}
        run: |
          ${{ fromJSON(inputs.component).test_script }}

      # GitHub's 'Complete job' step is unaware of launched executables
      # and will fail to clean up orphan processes.
      - name: Post-job cleanup processes on Windows
        if: ${{ always() && runner.os == 'Windows' }}
        shell: powershell
        run: . '${{ github.workspace }}\build_tools\github_actions\cleanup_processes.ps1'
