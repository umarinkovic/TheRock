name: "Setup test environment"

inputs:
  VENV_DIR:
    type: string
    required: true
  OUTPUT_ARTIFACTS_DIR:
    type: string
    required: true
  ARTIFACT_GROUP:
    type: string
  ARTIFACT_RUN_ID:
    type: string
  FETCH_ARTIFACT_ARGS:
    type: string
  IS_PR_FROM_FORK:
    type: boolean
    default: false
  REQUIREMENTS:
    type: string
    default: "-r requirements-test-base.txt"

runs:
  using: "composite"
  steps:
    - name: "Setting up Python"
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: 3.12

    - name: Create Python venv
      shell: bash
      env:
        VENV_DIR: ${{ inputs.VENV_DIR }}
      run: |
        python build_tools/setup_venv.py ${VENV_DIR} \
          --activate-in-future-github-actions-steps

    - name: Install test requirements
      if: ${{ inputs.REQUIREMENTS != '' }}
      shell: bash
      env:
        REQUIREMENTS: ${{ inputs.REQUIREMENTS }}
      run: |
        pip install ${REQUIREMENTS}
        pip freeze

    - name: Install the AWS tool
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: ./dockerfiles/install_awscli.sh

    - name: Install the AWS tool
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      run: |
        choco install --no-progress -y awscli
        echo "$PATH;C:\Program Files\Amazon\AWSCLIV2" >> $GITHUB_PATH

    - name: Download and Unpack Artifacts
      shell: bash
      env:
        OUTPUT_ARTIFACTS_DIR: ${{ inputs.OUTPUT_ARTIFACTS_DIR }}
        ARTIFACT_GROUP: ${{ inputs.ARTIFACT_GROUP }}
        ARTIFACT_RUN_ID: ${{ inputs.ARTIFACT_RUN_ID }}
        FETCH_ARTIFACT_ARGS: ${{ inputs.FETCH_ARTIFACT_ARGS }}
        GITHUB_TOKEN: ${{ github.token }}
        IS_PR_FROM_FORK: ${{ inputs.IS_PR_FROM_FORK }}
      run: |
        python ./build_tools/install_rocm_from_artifacts.py \
          --run-id=${ARTIFACT_RUN_ID} \
          --artifact-group=${ARTIFACT_GROUP} \
          --output-dir=${OUTPUT_ARTIFACTS_DIR} \
          ${FETCH_ARTIFACT_ARGS}
